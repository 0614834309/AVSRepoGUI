// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var welcome = VspackageModel.FromJson(jsonString);

namespace AVSRepoGUI
{
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class AvsPackage
    {
        [JsonProperty("file-format")]
        public long FileFormat { get; set; }

        [JsonProperty("packages")]
        public Package[] Packages { get; set; }
    }

    public partial class Package
    {
        [System.ComponentModel.DefaultValue(AvsApi.PluginStatus.NotInstalled)]
        public AvsApi.PluginStatus Status { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("type")]
        public TypeEnum Type { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("website", NullValueHandling = NullValueHandling.Ignore)]
        public string Website { get; set; }

        [JsonProperty("category")]
        public string Category { get; set; }

        [JsonProperty("identifier")]
        public string Identifier { get; set; }

        [JsonProperty("namespace", NullValueHandling = NullValueHandling.Ignore)]
        public string Namespace { get; set; }

        [JsonProperty("github", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Github { get; set; }

        [JsonProperty("gitbranch", NullValueHandling = NullValueHandling.Ignore)]
        public Uri Gitbranch { get; set; }

        [JsonProperty("releases")]
        public Release[] Releases { get; set; }

        [JsonProperty("modulename", NullValueHandling = NullValueHandling.Ignore)]
        public string Modulename { get; set; }

        [JsonProperty("dependencies", NullValueHandling = NullValueHandling.Ignore)]
        public string[] Dependencies { get; set; }

        [JsonProperty("doom9", NullValueHandling = NullValueHandling.Ignore)]
        public string Doom9 { get; set; }
    }



    public partial class Release
    {
        [JsonProperty("version")]
        public string Version { get; set; }

        public string VersionLocal { get; set; }

        [JsonProperty("published", NullValueHandling = NullValueHandling.Ignore)]
        public string Published { get; set; }

        [JsonProperty("win32", NullValueHandling = NullValueHandling.Ignore)]
        public Win32 Win32 { get; set; }

        [JsonProperty("win64", NullValueHandling = NullValueHandling.Ignore)]
        public Win64 Win64 { get; set; }

        [JsonProperty("script", NullValueHandling = NullValueHandling.Ignore)]
        public Script Script { get; set; }
    }

    public partial class Script
    {
        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("files")]
        public Dictionary<string, string[]> Files { get; set; }
    }

    public partial class Win32
    {
        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("files")]
        public Dictionary<string, string[]> Files { get; set; }
    }

    public partial class Win64
    {
        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("files")]
        public Dictionary<string, string[]> Files { get; set; }
    }

    public enum TypeEnum { avsiScript, avsPlugin };

    public partial class AvsPackage
    {
        public static AvsPackage FromJson(string json) => JsonConvert.DeserializeObject<AvsPackage>(json, Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this AvsPackage self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                TypeEnumConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class TypeEnumConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(TypeEnum) || t == typeof(TypeEnum?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "avsiScript":
                    return TypeEnum.avsiScript;
                case "avsPlugin":
                    return TypeEnum.avsPlugin;
            }
            throw new Exception("Cannot unmarshal type TypeEnum");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (TypeEnum)untypedValue;
            switch (value)
            {
                case TypeEnum.avsiScript:
                    serializer.Serialize(writer, "avsiScript");
                    return;
                case TypeEnum.avsPlugin:
                    serializer.Serialize(writer, "avsPlugin");
                    return;
            }
            throw new Exception("Cannot marshal type TypeEnum");
        }

        public static readonly TypeEnumConverter Singleton = new TypeEnumConverter();
    }
}
